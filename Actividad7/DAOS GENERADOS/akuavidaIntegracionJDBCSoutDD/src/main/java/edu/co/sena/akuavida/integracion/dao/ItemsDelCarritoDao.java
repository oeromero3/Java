/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.akuavida.integracion.dao;

import edu.co.sena.akuavida.integracion.dto.*;
import edu.co.sena.akuavida.integracion.exceptions.*;

public interface ItemsDelCarritoDao
{
	/** 
	 * Inserts a new row in the items_del_carrito table.
	 */
	public ItemsDelCarritoPk insert(ItemsDelCarrito dto) throws ItemsDelCarritoDaoException;

	/** 
	 * Updates a single row in the items_del_carrito table.
	 */
	public void update(ItemsDelCarritoPk pk, ItemsDelCarrito dto) throws ItemsDelCarritoDaoException;

	/** 
	 * Deletes a single row in the items_del_carrito table.
	 */
	public void delete(ItemsDelCarritoPk pk) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns the rows from the items_del_carrito table that matches the specified primary-key value.
	 */
	public ItemsDelCarrito findByPrimaryKey(ItemsDelCarritoPk pk) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Producto_ID_producto = :productoIdProducto AND Carrito_De_Compras_ID_Carrito = :carritoDeComprasIdCarrito'.
	 */
	public ItemsDelCarrito findByPrimaryKey(String productoIdProducto, String carritoDeComprasIdCarrito) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria ''.
	 */
	public ItemsDelCarrito[] findAll() throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Carrito_De_Compras_ID_Carrito = :carritoDeComprasIdCarrito'.
	 */
	public ItemsDelCarrito[] findByCarritoDeCompras(String carritoDeComprasIdCarrito) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public ItemsDelCarrito[] findByProducto(String productoIdProducto) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public ItemsDelCarrito[] findWhereProductoIdProductoEquals(String productoIdProducto) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Cantidad = :cantidad'.
	 */
	public ItemsDelCarrito[] findWhereCantidadEquals(int cantidad) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Costo_Unitario = :costoUnitario'.
	 */
	public ItemsDelCarrito[] findWhereCostoUnitarioEquals(float costoUnitario) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Costo_Total = :costoTotal'.
	 */
	public ItemsDelCarrito[] findWhereCostoTotalEquals(float costoTotal) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Carrito_De_Compras_ID_Carrito = :carritoDeComprasIdCarrito'.
	 */
	public ItemsDelCarrito[] findWhereCarritoDeComprasIdCarritoEquals(String carritoDeComprasIdCarrito) throws ItemsDelCarritoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the items_del_carrito table that match the specified arbitrary SQL statement
	 */
	public ItemsDelCarrito[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemsDelCarritoDaoException;

	/** 
	 * Returns all rows from the items_del_carrito table that match the specified arbitrary SQL statement
	 */
	public ItemsDelCarrito[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemsDelCarritoDaoException;

}
