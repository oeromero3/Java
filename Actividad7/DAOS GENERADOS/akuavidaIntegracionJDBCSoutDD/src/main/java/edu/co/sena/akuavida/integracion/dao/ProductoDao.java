/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.akuavida.integracion.dao;

import edu.co.sena.akuavida.integracion.dto.*;
import edu.co.sena.akuavida.integracion.exceptions.*;

public interface ProductoDao
{
	/** 
	 * Inserts a new row in the producto table.
	 */
	public ProductoPk insert(Producto dto) throws ProductoDaoException;

	/** 
	 * Updates a single row in the producto table.
	 */
	public void update(ProductoPk pk, Producto dto) throws ProductoDaoException;

	/** 
	 * Deletes a single row in the producto table.
	 */
	public void delete(ProductoPk pk) throws ProductoDaoException;

	/** 
	 * Returns the rows from the producto table that matches the specified primary-key value.
	 */
	public Producto findByPrimaryKey(ProductoPk pk) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'ID_producto = :idProducto'.
	 */
	public Producto findByPrimaryKey(String idProducto) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria ''.
	 */
	public Producto[] findAll() throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Categorias_ID_Categoria = :categoriasIdCategoria'.
	 */
	public Producto[] findByCategorias(int categoriasIdCategoria) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'ID_producto = :idProducto'.
	 */
	public Producto[] findWhereIdProductoEquals(String idProducto) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Nombre = :nombre'.
	 */
	public Producto[] findWhereNombreEquals(String nombre) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Precio = :precio'.
	 */
	public Producto[] findWherePrecioEquals(float precio) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Imagen = :imagen'.
	 */
	public Producto[] findWhereImagenEquals(byte[] imagen) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Descripcion = :descripcion'.
	 */
	public Producto[] findWhereDescripcionEquals(String descripcion) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Cantidad = :cantidad'.
	 */
	public Producto[] findWhereCantidadEquals(int cantidad) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Activo = :activo'.
	 */
	public Producto[] findWhereActivoEquals(short activo) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'impuesto = :impuesto'.
	 */
	public Producto[] findWhereImpuestoEquals(float impuesto) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the criteria 'Categorias_ID_Categoria = :categoriasIdCategoria'.
	 */
	public Producto[] findWhereCategoriasIdCategoriaEquals(int categoriasIdCategoria) throws ProductoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the producto table that match the specified arbitrary SQL statement
	 */
	public Producto[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProductoDaoException;

	/** 
	 * Returns all rows from the producto table that match the specified arbitrary SQL statement
	 */
	public Producto[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProductoDaoException;

}
