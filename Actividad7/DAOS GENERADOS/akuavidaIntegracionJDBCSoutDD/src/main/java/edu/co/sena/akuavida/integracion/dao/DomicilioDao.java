/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.akuavida.integracion.dao;

import edu.co.sena.akuavida.integracion.dto.*;
import edu.co.sena.akuavida.integracion.exceptions.*;

public interface DomicilioDao
{
	/** 
	 * Inserts a new row in the domicilio table.
	 */
	public DomicilioPk insert(Domicilio dto) throws DomicilioDaoException;

	/** 
	 * Updates a single row in the domicilio table.
	 */
	public void update(DomicilioPk pk, Domicilio dto) throws DomicilioDaoException;

	/** 
	 * Deletes a single row in the domicilio table.
	 */
	public void delete(DomicilioPk pk) throws DomicilioDaoException;

	/** 
	 * Returns the rows from the domicilio table that matches the specified primary-key value.
	 */
	public Domicilio findByPrimaryKey(DomicilioPk pk) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Cuenta_Tipo_Documento = :cuentaTipoDocumento AND Cuenta_Numero_Documento = :cuentaNumeroDocumento'.
	 */
	public Domicilio findByPrimaryKey(String cuentaTipoDocumento, String cuentaNumeroDocumento) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria ''.
	 */
	public Domicilio[] findAll() throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Cuenta_Tipo_Documento = :cuentaTipoDocumento AND Cuenta_Numero_Documento = :cuentaNumeroDocumento'.
	 */
	public Domicilio[] findByCuenta(String cuentaTipoDocumento, String cuentaNumeroDocumento) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public Domicilio[] findByMunicipio(String municipioIdmunicipio) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Municipio_idMunicipio = :municipioIdmunicipio'.
	 */
	public Domicilio[] findWhereMunicipioIdmunicipioEquals(String municipioIdmunicipio) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Cuenta_Tipo_Documento = :cuentaTipoDocumento'.
	 */
	public Domicilio[] findWhereCuentaTipoDocumentoEquals(String cuentaTipoDocumento) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Cuenta_Numero_Documento = :cuentaNumeroDocumento'.
	 */
	public Domicilio[] findWhereCuentaNumeroDocumentoEquals(String cuentaNumeroDocumento) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Ciudad = :ciudad'.
	 */
	public Domicilio[] findWhereCiudadEquals(String ciudad) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Direccion = :direccion'.
	 */
	public Domicilio[] findWhereDireccionEquals(String direccion) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the criteria 'Telefono = :telefono'.
	 */
	public Domicilio[] findWhereTelefonoEquals(String telefono) throws DomicilioDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the domicilio table that match the specified arbitrary SQL statement
	 */
	public Domicilio[] findByDynamicSelect(String sql, Object[] sqlParams) throws DomicilioDaoException;

	/** 
	 * Returns all rows from the domicilio table that match the specified arbitrary SQL statement
	 */
	public Domicilio[] findByDynamicWhere(String sql, Object[] sqlParams) throws DomicilioDaoException;

}
