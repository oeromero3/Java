/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.akuavida.integracion.dao;

import edu.co.sena.akuavida.integracion.dto.*;
import edu.co.sena.akuavida.integracion.exceptions.*;

public interface PromocionesDao
{
	/** 
	 * Inserts a new row in the promociones table.
	 */
	public PromocionesPk insert(Promociones dto) throws PromocionesDaoException;

	/** 
	 * Updates a single row in the promociones table.
	 */
	public void update(PromocionesPk pk, Promociones dto) throws PromocionesDaoException;

	/** 
	 * Deletes a single row in the promociones table.
	 */
	public void delete(PromocionesPk pk) throws PromocionesDaoException;

	/** 
	 * Returns the rows from the promociones table that matches the specified primary-key value.
	 */
	public Promociones findByPrimaryKey(PromocionesPk pk) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Id_Promocion = :idPromocion'.
	 */
	public Promociones findByPrimaryKey(String idPromocion) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria ''.
	 */
	public Promociones[] findAll() throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public Promociones[] findByProducto(String productoIdProducto) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Id_Promocion = :idPromocion'.
	 */
	public Promociones[] findWhereIdPromocionEquals(String idPromocion) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Descuentos = :descuentos'.
	 */
	public Promociones[] findWhereDescuentosEquals(float descuentos) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Nombre = :nombre'.
	 */
	public Promociones[] findWhereNombreEquals(String nombre) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Precio = :precio'.
	 */
	public Promociones[] findWherePrecioEquals(float precio) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public Promociones[] findWhereProductoIdProductoEquals(String productoIdProducto) throws PromocionesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the promociones table that match the specified arbitrary SQL statement
	 */
	public Promociones[] findByDynamicSelect(String sql, Object[] sqlParams) throws PromocionesDaoException;

	/** 
	 * Returns all rows from the promociones table that match the specified arbitrary SQL statement
	 */
	public Promociones[] findByDynamicWhere(String sql, Object[] sqlParams) throws PromocionesDaoException;

}
