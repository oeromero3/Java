/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.akuavida.integracion.jdbc;

import edu.co.sena.akuavida.integracion.dao.*;
import edu.co.sena.akuavida.integracion.factory.*;
import edu.co.sena.akuavida.integracion.dto.*;
import edu.co.sena.akuavida.integracion.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ItemsDelCarritoDaoImpl extends AbstractDAO implements ItemsDelCarritoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ItemsDelCarritoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT Producto_ID_producto, Cantidad, Costo_Unitario, Costo_Total, Carrito_De_Compras_ID_Carrito FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( Producto_ID_producto, Cantidad, Costo_Unitario, Costo_Total, Carrito_De_Compras_ID_Carrito ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET Producto_ID_producto = ?, Cantidad = ?, Costo_Unitario = ?, Costo_Total = ?, Carrito_De_Compras_ID_Carrito = ? WHERE Producto_ID_producto = ? AND Carrito_De_Compras_ID_Carrito = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE Producto_ID_producto = ? AND Carrito_De_Compras_ID_Carrito = ?";

	/** 
	 * Index of column Producto_ID_producto
	 */
	protected static final int COLUMN_PRODUCTO_ID_PRODUCTO = 1;

	/** 
	 * Index of column Cantidad
	 */
	protected static final int COLUMN_CANTIDAD = 2;

	/** 
	 * Index of column Costo_Unitario
	 */
	protected static final int COLUMN_COSTO_UNITARIO = 3;

	/** 
	 * Index of column Costo_Total
	 */
	protected static final int COLUMN_COSTO_TOTAL = 4;

	/** 
	 * Index of column Carrito_De_Compras_ID_Carrito
	 */
	protected static final int COLUMN_CARRITO_DE_COMPRAS_ID_CARRITO = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column Producto_ID_producto
	 */
	protected static final int PK_COLUMN_PRODUCTO_ID_PRODUCTO = 1;

	/** 
	 * Index of primary-key column Carrito_De_Compras_ID_Carrito
	 */
	protected static final int PK_COLUMN_CARRITO_DE_COMPRAS_ID_CARRITO = 2;

	/** 
	 * Inserts a new row in the items_del_carrito table.
	 */
	public ItemsDelCarritoPk insert(ItemsDelCarrito dto) throws ItemsDelCarritoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isProductoIdProductoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Producto_ID_producto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCantidadModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Cantidad" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCostoUnitarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Costo_Unitario" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCostoTotalModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Costo_Total" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCarritoDeComprasIdCarritoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Carrito_De_Compras_ID_Carrito" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isProductoIdProductoModified()) {
				stmt.setString( index++, dto.getProductoIdProducto() );
			}
		
			if (dto.isCantidadModified()) {
				stmt.setInt( index++, dto.getCantidad() );
			}
		
			if (dto.isCostoUnitarioModified()) {
				stmt.setFloat( index++, dto.getCostoUnitario() );
			}
		
			if (dto.isCostoTotalModified()) {
				stmt.setFloat( index++, dto.getCostoTotal() );
			}
		
			if (dto.isCarritoDeComprasIdCarritoModified()) {
				stmt.setString( index++, dto.getCarritoDeComprasIdCarrito() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemsDelCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the items_del_carrito table.
	 */
	public void update(ItemsDelCarritoPk pk, ItemsDelCarrito dto) throws ItemsDelCarritoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isProductoIdProductoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Producto_ID_producto=?" );
				modified=true;
			}
		
			if (dto.isCantidadModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Cantidad=?" );
				modified=true;
			}
		
			if (dto.isCostoUnitarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Costo_Unitario=?" );
				modified=true;
			}
		
			if (dto.isCostoTotalModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Costo_Total=?" );
				modified=true;
			}
		
			if (dto.isCarritoDeComprasIdCarritoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Carrito_De_Compras_ID_Carrito=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE Producto_ID_producto=? AND Carrito_De_Compras_ID_Carrito=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isProductoIdProductoModified()) {
				stmt.setString( index++, dto.getProductoIdProducto() );
			}
		
			if (dto.isCantidadModified()) {
				stmt.setInt( index++, dto.getCantidad() );
			}
		
			if (dto.isCostoUnitarioModified()) {
				stmt.setFloat( index++, dto.getCostoUnitario() );
			}
		
			if (dto.isCostoTotalModified()) {
				stmt.setFloat( index++, dto.getCostoTotal() );
			}
		
			if (dto.isCarritoDeComprasIdCarritoModified()) {
				stmt.setString( index++, dto.getCarritoDeComprasIdCarrito() );
			}
		
			stmt.setString( index++, pk.getProductoIdProducto() );
			stmt.setString( index++, pk.getCarritoDeComprasIdCarrito() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemsDelCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the items_del_carrito table.
	 */
	public void delete(ItemsDelCarritoPk pk) throws ItemsDelCarritoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getProductoIdProducto() );
			stmt.setString( 2, pk.getCarritoDeComprasIdCarrito() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemsDelCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the items_del_carrito table that matches the specified primary-key value.
	 */
	public ItemsDelCarrito findByPrimaryKey(ItemsDelCarritoPk pk) throws ItemsDelCarritoDaoException
	{
		return findByPrimaryKey( pk.getProductoIdProducto(), pk.getCarritoDeComprasIdCarrito() );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Producto_ID_producto = :productoIdProducto AND Carrito_De_Compras_ID_Carrito = :carritoDeComprasIdCarrito'.
	 */
	public ItemsDelCarrito findByPrimaryKey(String productoIdProducto, String carritoDeComprasIdCarrito) throws ItemsDelCarritoDaoException
	{
		ItemsDelCarrito ret[] = findByDynamicSelect( SQL_SELECT + " WHERE Producto_ID_producto = ? AND Carrito_De_Compras_ID_Carrito = ?", new Object[] { productoIdProducto, carritoDeComprasIdCarrito } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria ''.
	 */
	public ItemsDelCarrito[] findAll() throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY Producto_ID_producto, Carrito_De_Compras_ID_Carrito", null );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Carrito_De_Compras_ID_Carrito = :carritoDeComprasIdCarrito'.
	 */
	public ItemsDelCarrito[] findByCarritoDeCompras(String carritoDeComprasIdCarrito) throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Carrito_De_Compras_ID_Carrito = ?", new Object[] { carritoDeComprasIdCarrito } );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public ItemsDelCarrito[] findByProducto(String productoIdProducto) throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Producto_ID_producto = ?", new Object[] { productoIdProducto } );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public ItemsDelCarrito[] findWhereProductoIdProductoEquals(String productoIdProducto) throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Producto_ID_producto = ? ORDER BY Producto_ID_producto", new Object[] { productoIdProducto } );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Cantidad = :cantidad'.
	 */
	public ItemsDelCarrito[] findWhereCantidadEquals(int cantidad) throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Cantidad = ? ORDER BY Cantidad", new Object[] {  new Integer(cantidad) } );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Costo_Unitario = :costoUnitario'.
	 */
	public ItemsDelCarrito[] findWhereCostoUnitarioEquals(float costoUnitario) throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Costo_Unitario = ? ORDER BY Costo_Unitario", new Object[] {  new Float(costoUnitario) } );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Costo_Total = :costoTotal'.
	 */
	public ItemsDelCarrito[] findWhereCostoTotalEquals(float costoTotal) throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Costo_Total = ? ORDER BY Costo_Total", new Object[] {  new Float(costoTotal) } );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the criteria 'Carrito_De_Compras_ID_Carrito = :carritoDeComprasIdCarrito'.
	 */
	public ItemsDelCarrito[] findWhereCarritoDeComprasIdCarritoEquals(String carritoDeComprasIdCarrito) throws ItemsDelCarritoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Carrito_De_Compras_ID_Carrito = ? ORDER BY Carrito_De_Compras_ID_Carrito", new Object[] { carritoDeComprasIdCarrito } );
	}

	/**
	 * Method 'ItemsDelCarritoDaoImpl'
	 * 
	 */
	public ItemsDelCarritoDaoImpl()
	{
	}

	/**
	 * Method 'ItemsDelCarritoDaoImpl'
	 * 
	 * @param userConn
	 */
	public ItemsDelCarritoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "akuavida.items_del_carrito";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ItemsDelCarrito fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ItemsDelCarrito dto = new ItemsDelCarrito();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ItemsDelCarrito[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ItemsDelCarrito dto = new ItemsDelCarrito();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ItemsDelCarrito ret[] = new ItemsDelCarrito[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ItemsDelCarrito dto, ResultSet rs) throws SQLException
	{
		dto.setProductoIdProducto( rs.getString( COLUMN_PRODUCTO_ID_PRODUCTO ) );
		dto.setCantidad( rs.getInt( COLUMN_CANTIDAD ) );
		dto.setCostoUnitario( rs.getFloat( COLUMN_COSTO_UNITARIO ) );
		dto.setCostoTotal( rs.getFloat( COLUMN_COSTO_TOTAL ) );
		dto.setCarritoDeComprasIdCarrito( rs.getString( COLUMN_CARRITO_DE_COMPRAS_ID_CARRITO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ItemsDelCarrito dto)
	{
		dto.setProductoIdProductoModified( false );
		dto.setCantidadModified( false );
		dto.setCostoUnitarioModified( false );
		dto.setCostoTotalModified( false );
		dto.setCarritoDeComprasIdCarritoModified( false );
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the specified arbitrary SQL statement
	 */
	public ItemsDelCarrito[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemsDelCarritoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemsDelCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the items_del_carrito table that match the specified arbitrary SQL statement
	 */
	public ItemsDelCarrito[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemsDelCarritoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ItemsDelCarritoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
