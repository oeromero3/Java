/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.akuavida.integracion.jdbc;

import edu.co.sena.akuavida.integracion.dao.*;
import edu.co.sena.akuavida.integracion.factory.*;
import edu.co.sena.akuavida.integracion.dto.*;
import edu.co.sena.akuavida.integracion.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PromocionesDaoImpl extends AbstractDAO implements PromocionesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( PromocionesDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT Id_Promocion, Descuentos, Nombre, Precio, Producto_ID_producto FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( Id_Promocion, Descuentos, Nombre, Precio, Producto_ID_producto ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET Id_Promocion = ?, Descuentos = ?, Nombre = ?, Precio = ?, Producto_ID_producto = ? WHERE Id_Promocion = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE Id_Promocion = ?";

	/** 
	 * Index of column Id_Promocion
	 */
	protected static final int COLUMN_ID_PROMOCION = 1;

	/** 
	 * Index of column Descuentos
	 */
	protected static final int COLUMN_DESCUENTOS = 2;

	/** 
	 * Index of column Nombre
	 */
	protected static final int COLUMN_NOMBRE = 3;

	/** 
	 * Index of column Precio
	 */
	protected static final int COLUMN_PRECIO = 4;

	/** 
	 * Index of column Producto_ID_producto
	 */
	protected static final int COLUMN_PRODUCTO_ID_PRODUCTO = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column Id_Promocion
	 */
	protected static final int PK_COLUMN_ID_PROMOCION = 1;

	/** 
	 * Inserts a new row in the promociones table.
	 */
	public PromocionesPk insert(Promociones dto) throws PromocionesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isIdPromocionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Id_Promocion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDescuentosModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Descuentos" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Nombre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrecioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Precio" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isProductoIdProductoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Producto_ID_producto" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPromocionModified()) {
				stmt.setString( index++, dto.getIdPromocion() );
			}
		
			if (dto.isDescuentosModified()) {
				stmt.setFloat( index++, dto.getDescuentos() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isPrecioModified()) {
				stmt.setFloat( index++, dto.getPrecio() );
			}
		
			if (dto.isProductoIdProductoModified()) {
				stmt.setString( index++, dto.getProductoIdProducto() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PromocionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the promociones table.
	 */
	public void update(PromocionesPk pk, Promociones dto) throws PromocionesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isIdPromocionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Id_Promocion=?" );
				modified=true;
			}
		
			if (dto.isDescuentosModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Descuentos=?" );
				modified=true;
			}
		
			if (dto.isNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Nombre=?" );
				modified=true;
			}
		
			if (dto.isPrecioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Precio=?" );
				modified=true;
			}
		
			if (dto.isProductoIdProductoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Producto_ID_producto=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE Id_Promocion=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isIdPromocionModified()) {
				stmt.setString( index++, dto.getIdPromocion() );
			}
		
			if (dto.isDescuentosModified()) {
				stmt.setFloat( index++, dto.getDescuentos() );
			}
		
			if (dto.isNombreModified()) {
				stmt.setString( index++, dto.getNombre() );
			}
		
			if (dto.isPrecioModified()) {
				stmt.setFloat( index++, dto.getPrecio() );
			}
		
			if (dto.isProductoIdProductoModified()) {
				stmt.setString( index++, dto.getProductoIdProducto() );
			}
		
			stmt.setString( index++, pk.getIdPromocion() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PromocionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the promociones table.
	 */
	public void delete(PromocionesPk pk) throws PromocionesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getIdPromocion() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PromocionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the promociones table that matches the specified primary-key value.
	 */
	public Promociones findByPrimaryKey(PromocionesPk pk) throws PromocionesDaoException
	{
		return findByPrimaryKey( pk.getIdPromocion() );
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Id_Promocion = :idPromocion'.
	 */
	public Promociones findByPrimaryKey(String idPromocion) throws PromocionesDaoException
	{
		Promociones ret[] = findByDynamicSelect( SQL_SELECT + " WHERE Id_Promocion = ?", new Object[] { idPromocion } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria ''.
	 */
	public Promociones[] findAll() throws PromocionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY Id_Promocion", null );
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public Promociones[] findByProducto(String productoIdProducto) throws PromocionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Producto_ID_producto = ?", new Object[] { productoIdProducto } );
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Id_Promocion = :idPromocion'.
	 */
	public Promociones[] findWhereIdPromocionEquals(String idPromocion) throws PromocionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Id_Promocion = ? ORDER BY Id_Promocion", new Object[] { idPromocion } );
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Descuentos = :descuentos'.
	 */
	public Promociones[] findWhereDescuentosEquals(float descuentos) throws PromocionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Descuentos = ? ORDER BY Descuentos", new Object[] {  new Float(descuentos) } );
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Nombre = :nombre'.
	 */
	public Promociones[] findWhereNombreEquals(String nombre) throws PromocionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Nombre = ? ORDER BY Nombre", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Precio = :precio'.
	 */
	public Promociones[] findWherePrecioEquals(float precio) throws PromocionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Precio = ? ORDER BY Precio", new Object[] {  new Float(precio) } );
	}

	/** 
	 * Returns all rows from the promociones table that match the criteria 'Producto_ID_producto = :productoIdProducto'.
	 */
	public Promociones[] findWhereProductoIdProductoEquals(String productoIdProducto) throws PromocionesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Producto_ID_producto = ? ORDER BY Producto_ID_producto", new Object[] { productoIdProducto } );
	}

	/**
	 * Method 'PromocionesDaoImpl'
	 * 
	 */
	public PromocionesDaoImpl()
	{
	}

	/**
	 * Method 'PromocionesDaoImpl'
	 * 
	 * @param userConn
	 */
	public PromocionesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "akuavida.promociones";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Promociones fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Promociones dto = new Promociones();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Promociones[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Promociones dto = new Promociones();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Promociones ret[] = new Promociones[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Promociones dto, ResultSet rs) throws SQLException
	{
		dto.setIdPromocion( rs.getString( COLUMN_ID_PROMOCION ) );
		dto.setDescuentos( rs.getFloat( COLUMN_DESCUENTOS ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setPrecio( rs.getFloat( COLUMN_PRECIO ) );
		dto.setProductoIdProducto( rs.getString( COLUMN_PRODUCTO_ID_PRODUCTO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Promociones dto)
	{
		dto.setIdPromocionModified( false );
		dto.setDescuentosModified( false );
		dto.setNombreModified( false );
		dto.setPrecioModified( false );
		dto.setProductoIdProductoModified( false );
	}

	/** 
	 * Returns all rows from the promociones table that match the specified arbitrary SQL statement
	 */
	public Promociones[] findByDynamicSelect(String sql, Object[] sqlParams) throws PromocionesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PromocionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the promociones table that match the specified arbitrary SQL statement
	 */
	public Promociones[] findByDynamicWhere(String sql, Object[] sqlParams) throws PromocionesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new PromocionesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
