/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.co.sena.akuavida.integracion.jdbc;

import edu.co.sena.akuavida.integracion.dao.*;
import edu.co.sena.akuavida.integracion.factory.*;
import edu.co.sena.akuavida.integracion.dto.*;
import edu.co.sena.akuavida.integracion.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CuentaDaoImpl extends AbstractDAO implements CuentaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( CuentaDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT Tipo_Documento, Numero_Documento, Primer_Nombre, Segundo_Nombre, Primer_Apellido, Segundo_Apellido, Contrasena, Correo, Direccion, Telefono, Rool, Activo, Ususario_idUsusario FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( Tipo_Documento, Numero_Documento, Primer_Nombre, Segundo_Nombre, Primer_Apellido, Segundo_Apellido, Contrasena, Correo, Direccion, Telefono, Rool, Activo, Ususario_idUsusario ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET Tipo_Documento = ?, Numero_Documento = ?, Primer_Nombre = ?, Segundo_Nombre = ?, Primer_Apellido = ?, Segundo_Apellido = ?, Contrasena = ?, Correo = ?, Direccion = ?, Telefono = ?, Rool = ?, Activo = ?, Ususario_idUsusario = ? WHERE Tipo_Documento = ? AND Numero_Documento = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE Tipo_Documento = ? AND Numero_Documento = ?";

	/** 
	 * Index of column Tipo_Documento
	 */
	protected static final int COLUMN_TIPO_DOCUMENTO = 1;

	/** 
	 * Index of column Numero_Documento
	 */
	protected static final int COLUMN_NUMERO_DOCUMENTO = 2;

	/** 
	 * Index of column Primer_Nombre
	 */
	protected static final int COLUMN_PRIMER_NOMBRE = 3;

	/** 
	 * Index of column Segundo_Nombre
	 */
	protected static final int COLUMN_SEGUNDO_NOMBRE = 4;

	/** 
	 * Index of column Primer_Apellido
	 */
	protected static final int COLUMN_PRIMER_APELLIDO = 5;

	/** 
	 * Index of column Segundo_Apellido
	 */
	protected static final int COLUMN_SEGUNDO_APELLIDO = 6;

	/** 
	 * Index of column Contrasena
	 */
	protected static final int COLUMN_CONTRASENA = 7;

	/** 
	 * Index of column Correo
	 */
	protected static final int COLUMN_CORREO = 8;

	/** 
	 * Index of column Direccion
	 */
	protected static final int COLUMN_DIRECCION = 9;

	/** 
	 * Index of column Telefono
	 */
	protected static final int COLUMN_TELEFONO = 10;

	/** 
	 * Index of column Rool
	 */
	protected static final int COLUMN_ROOL = 11;

	/** 
	 * Index of column Activo
	 */
	protected static final int COLUMN_ACTIVO = 12;

	/** 
	 * Index of column Ususario_idUsusario
	 */
	protected static final int COLUMN_USUSARIO_IDUSUSARIO = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column Tipo_Documento
	 */
	protected static final int PK_COLUMN_TIPO_DOCUMENTO = 1;

	/** 
	 * Index of primary-key column Numero_Documento
	 */
	protected static final int PK_COLUMN_NUMERO_DOCUMENTO = 2;

	/** 
	 * Inserts a new row in the cuenta table.
	 */
	public CuentaPk insert(Cuenta dto) throws CuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			StringBuffer values = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isTipoDocumentoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Tipo_Documento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isNumeroDocumentoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Numero_Documento" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrimerNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Primer_Nombre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSegundoNombreModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Segundo_Nombre" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isPrimerApellidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Primer_Apellido" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isSegundoApellidoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Segundo_Apellido" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isContrasenaModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Contrasena" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isCorreoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Correo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isDireccionModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Direccion" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isTelefonoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Telefono" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isRoolModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Rool" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isActivoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Activo" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (dto.isUsusarioIdususarioModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
					values.append( ", " );
				}
		
				sql.append( "Ususario_idUsusario" );
				values.append( "?" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			sql.append( values );
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isTipoDocumentoModified()) {
				stmt.setString( index++, dto.getTipoDocumento() );
			}
		
			if (dto.isNumeroDocumentoModified()) {
				stmt.setString( index++, dto.getNumeroDocumento() );
			}
		
			if (dto.isPrimerNombreModified()) {
				stmt.setString( index++, dto.getPrimerNombre() );
			}
		
			if (dto.isSegundoNombreModified()) {
				stmt.setString( index++, dto.getSegundoNombre() );
			}
		
			if (dto.isPrimerApellidoModified()) {
				stmt.setString( index++, dto.getPrimerApellido() );
			}
		
			if (dto.isSegundoApellidoModified()) {
				stmt.setString( index++, dto.getSegundoApellido() );
			}
		
			if (dto.isContrasenaModified()) {
				stmt.setString( index++, dto.getContrasena() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isDireccionModified()) {
				stmt.setString( index++, dto.getDireccion() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isRoolModified()) {
				stmt.setString( index++, dto.getRool() );
			}
		
			if (dto.isActivoModified()) {
				stmt.setShort( index++, dto.getActivo() );
			}
		
			if (dto.isUsusarioIdususarioModified()) {
				stmt.setString( index++, dto.getUsusarioIdususario() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cuenta table.
	 */
	public void update(CuentaPk pk, Cuenta dto) throws CuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isTipoDocumentoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Tipo_Documento=?" );
				modified=true;
			}
		
			if (dto.isNumeroDocumentoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Numero_Documento=?" );
				modified=true;
			}
		
			if (dto.isPrimerNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Primer_Nombre=?" );
				modified=true;
			}
		
			if (dto.isSegundoNombreModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Segundo_Nombre=?" );
				modified=true;
			}
		
			if (dto.isPrimerApellidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Primer_Apellido=?" );
				modified=true;
			}
		
			if (dto.isSegundoApellidoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Segundo_Apellido=?" );
				modified=true;
			}
		
			if (dto.isContrasenaModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Contrasena=?" );
				modified=true;
			}
		
			if (dto.isCorreoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Correo=?" );
				modified=true;
			}
		
			if (dto.isDireccionModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Direccion=?" );
				modified=true;
			}
		
			if (dto.isTelefonoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Telefono=?" );
				modified=true;
			}
		
			if (dto.isRoolModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Rool=?" );
				modified=true;
			}
		
			if (dto.isActivoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Activo=?" );
				modified=true;
			}
		
			if (dto.isUsusarioIdususarioModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "Ususario_idUsusario=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE Tipo_Documento=? AND Numero_Documento=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isTipoDocumentoModified()) {
				stmt.setString( index++, dto.getTipoDocumento() );
			}
		
			if (dto.isNumeroDocumentoModified()) {
				stmt.setString( index++, dto.getNumeroDocumento() );
			}
		
			if (dto.isPrimerNombreModified()) {
				stmt.setString( index++, dto.getPrimerNombre() );
			}
		
			if (dto.isSegundoNombreModified()) {
				stmt.setString( index++, dto.getSegundoNombre() );
			}
		
			if (dto.isPrimerApellidoModified()) {
				stmt.setString( index++, dto.getPrimerApellido() );
			}
		
			if (dto.isSegundoApellidoModified()) {
				stmt.setString( index++, dto.getSegundoApellido() );
			}
		
			if (dto.isContrasenaModified()) {
				stmt.setString( index++, dto.getContrasena() );
			}
		
			if (dto.isCorreoModified()) {
				stmt.setString( index++, dto.getCorreo() );
			}
		
			if (dto.isDireccionModified()) {
				stmt.setString( index++, dto.getDireccion() );
			}
		
			if (dto.isTelefonoModified()) {
				stmt.setString( index++, dto.getTelefono() );
			}
		
			if (dto.isRoolModified()) {
				stmt.setString( index++, dto.getRool() );
			}
		
			if (dto.isActivoModified()) {
				stmt.setShort( index++, dto.getActivo() );
			}
		
			if (dto.isUsusarioIdususarioModified()) {
				stmt.setString( index++, dto.getUsusarioIdususario() );
			}
		
			stmt.setString( index++, pk.getTipoDocumento() );
			stmt.setString( index++, pk.getNumeroDocumento() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cuenta table.
	 */
	public void delete(CuentaPk pk) throws CuentaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getTipoDocumento() );
			stmt.setString( 2, pk.getNumeroDocumento() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cuenta table that matches the specified primary-key value.
	 */
	public Cuenta findByPrimaryKey(CuentaPk pk) throws CuentaDaoException
	{
		return findByPrimaryKey( pk.getTipoDocumento(), pk.getNumeroDocumento() );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Tipo_Documento = :tipoDocumento AND Numero_Documento = :numeroDocumento'.
	 */
	public Cuenta findByPrimaryKey(String tipoDocumento, String numeroDocumento) throws CuentaDaoException
	{
		Cuenta ret[] = findByDynamicSelect( SQL_SELECT + " WHERE Tipo_Documento = ? AND Numero_Documento = ?", new Object[] { tipoDocumento, numeroDocumento } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria ''.
	 */
	public Cuenta[] findAll() throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY Tipo_Documento, Numero_Documento", null );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Ususario_idUsusario = :ususarioIdususario'.
	 */
	public Cuenta[] findByUsusario(String ususarioIdususario) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Ususario_idUsusario = ?", new Object[] { ususarioIdususario } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Tipo_Documento = :tipoDocumento'.
	 */
	public Cuenta[] findWhereTipoDocumentoEquals(String tipoDocumento) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Tipo_Documento = ? ORDER BY Tipo_Documento", new Object[] { tipoDocumento } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Numero_Documento = :numeroDocumento'.
	 */
	public Cuenta[] findWhereNumeroDocumentoEquals(String numeroDocumento) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Numero_Documento = ? ORDER BY Numero_Documento", new Object[] { numeroDocumento } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Primer_Nombre = :primerNombre'.
	 */
	public Cuenta[] findWherePrimerNombreEquals(String primerNombre) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Primer_Nombre = ? ORDER BY Primer_Nombre", new Object[] { primerNombre } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Segundo_Nombre = :segundoNombre'.
	 */
	public Cuenta[] findWhereSegundoNombreEquals(String segundoNombre) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Segundo_Nombre = ? ORDER BY Segundo_Nombre", new Object[] { segundoNombre } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Primer_Apellido = :primerApellido'.
	 */
	public Cuenta[] findWherePrimerApellidoEquals(String primerApellido) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Primer_Apellido = ? ORDER BY Primer_Apellido", new Object[] { primerApellido } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Segundo_Apellido = :segundoApellido'.
	 */
	public Cuenta[] findWhereSegundoApellidoEquals(String segundoApellido) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Segundo_Apellido = ? ORDER BY Segundo_Apellido", new Object[] { segundoApellido } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Contrasena = :contrasena'.
	 */
	public Cuenta[] findWhereContrasenaEquals(String contrasena) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Contrasena = ? ORDER BY Contrasena", new Object[] { contrasena } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Correo = :correo'.
	 */
	public Cuenta[] findWhereCorreoEquals(String correo) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Correo = ? ORDER BY Correo", new Object[] { correo } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Direccion = :direccion'.
	 */
	public Cuenta[] findWhereDireccionEquals(String direccion) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Direccion = ? ORDER BY Direccion", new Object[] { direccion } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Telefono = :telefono'.
	 */
	public Cuenta[] findWhereTelefonoEquals(String telefono) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Telefono = ? ORDER BY Telefono", new Object[] { telefono } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Rool = :rool'.
	 */
	public Cuenta[] findWhereRoolEquals(String rool) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Rool = ? ORDER BY Rool", new Object[] { rool } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Activo = :activo'.
	 */
	public Cuenta[] findWhereActivoEquals(short activo) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Activo = ? ORDER BY Activo", new Object[] {  new Short(activo) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'Ususario_idUsusario = :ususarioIdususario'.
	 */
	public Cuenta[] findWhereUsusarioIdususarioEquals(String ususarioIdususario) throws CuentaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Ususario_idUsusario = ? ORDER BY Ususario_idUsusario", new Object[] { ususarioIdususario } );
	}

	/**
	 * Method 'CuentaDaoImpl'
	 * 
	 */
	public CuentaDaoImpl()
	{
	}

	/**
	 * Method 'CuentaDaoImpl'
	 * 
	 * @param userConn
	 */
	public CuentaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "akuavida.cuenta";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Cuenta fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Cuenta dto = new Cuenta();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Cuenta[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Cuenta dto = new Cuenta();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Cuenta ret[] = new Cuenta[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Cuenta dto, ResultSet rs) throws SQLException
	{
		dto.setTipoDocumento( rs.getString( COLUMN_TIPO_DOCUMENTO ) );
		dto.setNumeroDocumento( rs.getString( COLUMN_NUMERO_DOCUMENTO ) );
		dto.setPrimerNombre( rs.getString( COLUMN_PRIMER_NOMBRE ) );
		dto.setSegundoNombre( rs.getString( COLUMN_SEGUNDO_NOMBRE ) );
		dto.setPrimerApellido( rs.getString( COLUMN_PRIMER_APELLIDO ) );
		dto.setSegundoApellido( rs.getString( COLUMN_SEGUNDO_APELLIDO ) );
		dto.setContrasena( rs.getString( COLUMN_CONTRASENA ) );
		dto.setCorreo( rs.getString( COLUMN_CORREO ) );
		dto.setDireccion( rs.getString( COLUMN_DIRECCION ) );
		dto.setTelefono( rs.getString( COLUMN_TELEFONO ) );
		dto.setRool( rs.getString( COLUMN_ROOL ) );
		dto.setActivo( rs.getShort( COLUMN_ACTIVO ) );
		dto.setUsusarioIdususario( rs.getString( COLUMN_USUSARIO_IDUSUSARIO ) );
		reset(dto);
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Cuenta dto)
	{
		dto.setTipoDocumentoModified( false );
		dto.setNumeroDocumentoModified( false );
		dto.setPrimerNombreModified( false );
		dto.setSegundoNombreModified( false );
		dto.setPrimerApellidoModified( false );
		dto.setSegundoApellidoModified( false );
		dto.setContrasenaModified( false );
		dto.setCorreoModified( false );
		dto.setDireccionModified( false );
		dto.setTelefonoModified( false );
		dto.setRoolModified( false );
		dto.setActivoModified( false );
		dto.setUsusarioIdususarioModified( false );
	}

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public Cuenta[] findByDynamicSelect(String sql, Object[] sqlParams) throws CuentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public Cuenta[] findByDynamicWhere(String sql, Object[] sqlParams) throws CuentaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new CuentaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
